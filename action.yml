name: 'ottr-reports-commenting'
description: 'Works with ottr-reports to display results of the reports on a pull request'
inputs:
  check_type:
    description: "There are three types of reports that can be done and specified: 'spelling', 'urls', or 'quiz_format'."
    type: string
  error_min:
    description: "What number of errors should make this check fail?"
    default: 0
    type: number
  git_path:
    description: "What GitHub repository should this be run on?"
    type: string
    default: ${{ github.action_repository }}
  pr_num:
    description: "What should the preview branch be called?"
    default: ${{ github.event.pull_request.number }}
    type: string
  gh_pat:
    description: "A GitHub secret personal access token that is set in the current repo."
    type: string
  commit_id:
    description: "The commit id from the pull request this was called from"
    type: string
    default: ${{ github.sha }}

outputs:
  comments:
    description: "Comments that have the check report information and links"
  error_name:
    description: "The name of the error that was run"
  report_path:
    description: "The relative path to where the report was saved."
  error_num:
    description: "How many errors were found."

runs:
  using: "composite"
  steps:
    - name: Checkout files
      uses: actions/checkout@v2
      with:
        repository: ${{inputs.git_path}}
        fetch-depth: 0
        token: ${{ inputs.gh_pat }}

    - name: Run the check
      uses: jhudsl/ottr-reports@main
      id: check_results
      with:
        check_type: ${{ inputs.check_type }}
        error_min: ${{ inputs.error_min }}

    - name: Declare branch name
      run: |
        echo "branch_name='preview-${{ inputs.pr_num }}'" >> $GITHUB_ENV
      shell: bash
      
    - name: Make branch if it doesn't exist
      run: |
        git config --local user.email "itcrtrainingnetwork@gmail.com"
        git config --local user.name "jhudsl-robot"

        exists=$(git ls-remote https://${{ inputs.gh_pat }}@github.com/${{ inputs.git_path }} ${{ env.branch_name }} | wc -l | xargs)
        if [[ $exists == 0 ]];then
          echo branch doesnt exist
          git checkout -b ${{ env.branch_name }} || echo branch exists
          git push --set-upstream origin ${{ env.branch_name }}
        else
          echo branch does exist
        fi
      shell: bash

############################# Handle commenting ################################

    - name: Commit check errors
      run: |
        git add --force ${{ steps.check_results.outputs.report_path }} || echo "No changes to commit"
        git commit -m 'Add ${{ steps.check_results.outputs.error_name }} check file' || echo "No changes to commit"
        git pull --set-upstream origin ${{ env.branch_name }} --allow-unrelated-histories --strategy-option=ours
        git push --force origin ${{ env.branch_name }} || echo "No changes to commit"
      shell: bash

    - name: Build components of the spell check comment
      id: build-components
      run: |
        error_url=https://raw.githubusercontent.com/${{inputs.git_path}}/${{ env.branch_name }}/${{ steps.check_results.outputs.report_path }}
        echo ::set-output name=time::$(date +'%Y-%m-%d')
        echo ::set-output name=commit_id::$inputs.commit_id
        echo ::set-output name=error_url::$error_url
      shell: bash

    - name: Find Comment
      uses: peter-evans/find-comment@v1
      id: fc
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: ${{ steps.check_results.outputs.error_name }}

    - name: There are errors!
      if: ${{ steps.check_results.outputs.error_num >= inputs.error_min }}
      uses: peter-evans/create-or-update-comment@v1
      with:
        comment-id: ${{ steps.fc.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          :warning: ${{ steps.check_results.outputs.error_name }} :warning:
          There are ${{ steps.check_results.outputs.error_name }} that need to be addressed. [Read this guide for more info](https://github.com/jhudsl/OTTR_Template/wiki/Most-common-errors-and-pitfalls#spell-checkurl-checkquiz-format-fail).
          [Download the errors here.](${{ steps.build-components.outputs.error_url }})
          _Comment updated at ${{ steps.build-components.outputs.time }} with changes from ${{ steps.build-components.outputs.commit_id }}_
        edit-mode: replace

    - name: Check check results - fail if too many errors
      if: ${{ steps.check_results.outputs.error_num >= inputs.error_min }}
      run: exit 1
      shell: bash

    - name: No errors
      if: ${{ steps.check_results.outputs.error_num < inputs.error_min }}
      uses: peter-evans/create-or-update-comment@v1
      with:
        comment-id: ${{ steps.fc.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          No ${{ steps.check_results.outputs.error_name }}! :tada:
          _Comment updated at ${{ steps.build-components.outputs.time }} with changes from ${{ steps.build-components.outputs.commit_id }}_
        edit-mode: replace
